package com.sist.main;

/**
 *		상속
 *		=> 기존의 클래스를 재사용 (메서드 변경, 메서드 추가)
 *		=> extends
 *		=> 단일 상속
 *		=> 객체지향
 *			재사용 / 테이터 손실 방지 / 변경이 쉽게, 추가 가능
 *					| 캡슐화			| 다형성 (오버라이딩, 오버로딩)
 *			---------------------------------------
 * 			| 상속
 * 			=>	제약조건이 많다
 * 			=>	소스를 볼 수가 없다	=>	분석
 * 			=>	상위 클래스 =>	
 * 			=>	상속	=>	 보완 : **** 인터페이스 (구현)
 * 			
 * 			1) 장점
 * 				=> 중복을 제거
 * 				=> 코드가 간결하다
 * 				=> 메서드 기능을 필요시마다 변경
 * 
 * 				=> 상위클래스
 * 				 : 공통적인 기능
 * 				 	영화관 : 포스트 출력 / 예약 / 극장 / 회원가입 / 로그인 ...
 * 				 			영화관
 * 				 			|
 * 						--------------------
 * 						|					|
 * 				 		CGV / 롯데시네마 / 메가박스
 * 				 						상속받은 내용을 변경 => 오버라이딩
 * 
 * 				 			게시판 => 1500 줄 (글쓰기, 상세보기, 목록, 검색, 삭제)
 * 				 						=> HTML/CSS, JavaScript
 * 				 						=> 자바 / 오라클 연동 / 결과값 브라우저
 * 				 						=> CRUD (Create, Read, Update, Delete)
 * 				 			|
 * 				 ----------------------------------------
 * 				 |				|			|			|	
 * 				 자유게시판	댓글게시판		갤러리게시판	묻고답하기	
 * 				 				|			|			|
 * 				 									관리자/사용자
 * 				 			댓글추가		변경(이미지 업로드)	
 * 				=> 	하위클래스
 * 				=>	상속을 받으면 데이터형이 두개가 생긴다
 * 					동물
 * 					|
 * 			-----------------
 * 			|		|		|
 * 			개		소		말
 * 			-- 개, 동물
 * 			개	a=new 개()
 * 			동물	a=new 개()
 * 			------------- 상속을 내리는 클래스가 > 상속받는 클래스
 * 			int, long, double	==> 데이터형
 * 			클래스	=> 사용자 정의 데이터형이다
 * 						----------------
 * 			메서드 : 사용자 정의 메서드
 * 					-------------
 * 			==> 변경 (오버라이딩)
 * 			오버라이딩 (메서드 재정의)	=> 덮어쓴다
 * 									----- 구조가 동일
 * 			1) 상속이 존재 => 클래스에서 상속없이 재정의(오버라이딩)
 * 							=> 익명의 클래스
 * 			2) 메서드가 동일
 * 			3) 매개변수가 동일
 * 			4) 리턴형이 동일
 * 			5) 접근지정어 확장이 가능 / 축소하면 오류
 * 			private < default < protected < public
 * 			=> 메서드는 다른 클래스와 연결
 * 				------------------- 가급적이면 public으로 사용
 * 			** 클래스 / 생성자 / 메서드 => public
 * 			** 멤버변수	=> private (데이터 보호)
 * 				=> 필요시에 사용이 가능	=> getter / setter
 * 			** 윈도우	=> 보안 (X)	=> Button, TextField	=> default 로 생성
 * 
 * 			상위 클래스 : 상속을 내리는 클래스
 * 						=> 하위 클래스를 제어할 권한이 없다
 * 			하위 클래스 : 자신 + 	상위 클래스 제어할 수 있다
 * 					------		--------
 * 					 this		super
 * 					 |			|
 * 					 자신의 객체	상위 클래스의 객체
 * 					 			=> super();
 * 					 => 생성자 : this();
 * 				** 	A a	=	new B();		=> double d=10;
 * 					---			----
 * 					상위클래스		하위클래스
 * 								B가 가지고 있는 메서드
 * 					A가 가지고 있는 변수
 * 
 * 				변수: 클래스형
 * 				메서드: 생성자
 * 
 * 				------------------------
 * 				상위 클래스를 이용한다
 * 					| 	관련된 클래스를 여러개 묶어서 사용
 * 					| 	한개의 객체명으로 처리가 가능
 * 					| 	변수 많거나 / 객체가 많으면
 * 						-------------------- 제어가 어렵다
 * 						| 	한개의 이름으로 제어하는 방법
 * 							-------- 상위클래스 / 인터페이스 (스프링의 기반)
 * 												| 클래스의 일종
 * 			=> 상속시 예외 조건 / 접근지정어
 * 		=> 상속이 있는 경우
 *      
 * 			생성자 =>	매개변수가 있다면
 */
// 1. 상위 클래스 => 메모리 할당
class A
{
	public A (String s) {
		System.out.println(s);
	}
	public A () {
	}
}
class B extends A	// 상속을 위해서는 상위 클래스가 메모리 할당이 되어야 한다. 
{
		public B (String s)
		{
			super(s);	// 메모리 할당을 위해 매개변수가 있는 상위 클래스 생성자를 호출 => 상속을 내리는 클래스에는 생성자에 매개변수 사용을 지양
						// 라이브러리 중에서 매개변수를 사용하는 생성자가 있는 경우가 있다.
		}
		public B ()
		{
			super();	// 매개변수가 없는 생성자는 생략이 가능 => 컴파일러가 자동 추가
		}
	
}
public class 상속_1 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

}
